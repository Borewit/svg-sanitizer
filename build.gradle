/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.diffplug.spotless' version "7.0.2"
}

apply plugin: 'maven-publish'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.10.3')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

group = 'io.github.borewit'
version = '0.1.1'
description = 'SVG Sanitizer'
java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11

publishing {
    publications {

        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'SVG-Sanitizer'
                description = 'A Java library for sanitizing SVG files by removing JavaScript, blocking external resources, and preventing XSS vulnerabilities.'
                url = 'https://github.com/Borewit/svg-sanitizer'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/Borewit/svg-sanitizer/blob/master/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'Borewit'
                        name = 'Borewit'
                        timezone = 'Europe/Amsterdam'
                        url = 'https://borewit.github.io'
                    }
                }
                contributors {
                    contributor {
                        name = 'Gertjan van Oosten'
                        timezone = 'Europe/Amsterdam'
                        url = 'https://github.com/gjvoosten'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/Borewit/svg-sanitizer.git'
                    url = 'https://github.com/Borewit/svg-sanitizer'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

javadoc {
    options.addBooleanOption("Xdoclint:none", true)
    options.addStringOption("Xmaxwarns", "1")
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

java {
    withSourcesJar()
    withJavadocJar()
}
