plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'com.diffplug.spotless' version '7.2.1'
  id 'org.jreleaser' version '1.18.0'
}

apply plugin: 'maven-publish'

repositories {
  // CSS4J for io.sf.carte:echosvg-transcoder
  maven {
    url 'https://css4j.github.io/maven/'
  }
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

dependencies {
  testImplementation 'org.apache.santuario:xmlsec:4.0.4'
  testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.19.2'
  testImplementation 'io.sf.carte:echosvg-transcoder:2.2'
}

testing {
  suites {
    // Configure the built-in test suite
    test {
      // Use JUnit Jupiter test framework
      useJUnitJupiter('5.10.3')
    }
  }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

group = 'io.github.borewit'
version = '0.3.1'
description = 'SVG Sanitizer'
java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11

spotless {
  java {
    target 'src/main/java/**/*.java', 'src/test/java/**/*.java'
    googleJavaFormat()
    removeUnusedImports()
    trimTrailingWhitespace()
    endWithNewline()

    custom 'Refuse wildcard imports', {
      // Wildcard imports can't be resolved by spotless itself.
      // This will require the developer themselves to adhere to best practices.
      if (it =~ /\nimport .*\*;/) {
        throw new AssertionError("Do not use wildcard imports; note: 'spotlessApply' cannot resolve this issue.")
      }
    }
  }
}

javadoc {
  options.addBooleanOption("Xdoclint:none", true)
  options.addStringOption("Xmaxwarns", "1")
}

tasks.register('sourcesJar', Jar) {
  archiveClassifier.set('sources')
  from(sourceSets.main.allSource)
}

tasks.register('javadocJar', Jar) {
  archiveClassifier.set('javadoc')
  from(tasks.named('javadoc'))
}

tasks.named('jreleaserDeploy') {
  dependsOn tasks.named('publishMavenJavaPublicationToPreDeployRepository')
}

publishing {
  publications {

    mavenJava(MavenPublication) {
      from(components.java)

      artifact(tasks.named('sourcesJar'))
      artifact(tasks.named('javadocJar'))

      pom {
        name = 'SVG-Sanitizer'
        description = 'A Java library for sanitizing SVG files by removing JavaScript, blocking external resources, and preventing XSS vulnerabilities.'
        url = 'https://github.com/Borewit/svg-sanitizer'
        licenses {
          license {
            name = 'MIT'
            url = 'https://github.com/Borewit/svg-sanitizer/blob/master/LICENSE.txt'
          }
        }
        developers {
          developer {
            id = 'Borewit'
            name = 'Borewit'
            timezone = 'Europe/Amsterdam'
            url = 'https://borewit.github.io'
          }
        }
        contributors {
          contributor {
            name = 'Gertjan van Oosten'
            timezone = 'Europe/Amsterdam'
            url = 'https://github.com/gjvoosten'
          }
        }
        scm {
          connection = 'scm:git:https://github.com/Borewit/svg-sanitizer.git'
          url = 'https://github.com/Borewit/svg-sanitizer'
        }
      }
    }

  }
  repositories {
    maven {
      name = "PreDeploy"
      url = uri(layout.buildDirectory.dir("pre-deploy"))
    }
  }
}

if (!project.hasProperty('skip.signing')) {
  signing {
    setRequired {
      gradle.taskGraph.allTasks.any { it.name.contains("LocalMavenWithChecksums") }
    }
    sign publishing.publications.mavenJava
  }
}

jreleaser {
  project {
    copyright = 'Borewit'
    description = 'A Java library for sanitizing SVG files by removing JavaScript, blocking external resources, and preventing XSS vulnerabilities.'
  }
  signing {
    active = 'ALWAYS'
    armored = true
    mode = 'FILE'
    publicKey = findProperty("signing.publicKeyFile")
    secretKey = findProperty("signing.privateKeyFile")
  }
  deploy {
    maven {
      mavenCentral {
        sonatype {
          active = 'ALWAYS'
          url = 'https://central.sonatype.com/api/v1/publisher'
          username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
          password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
          stagingRepository('build/pre-deploy')
        }
      }
    }
  }
  release {
    github {
      enabled = false
    }
  }
}

